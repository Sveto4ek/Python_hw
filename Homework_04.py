# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия. Для выполнения расчета
# для конкретных значений необходимо запускать скрипт с параметрами.

# import sys
# vyrabotka, stavka, bonus = sys.argv[1:]
# print("Зарплата всего: ", float(vyrabotka) * float(stavka) + float(bonus))

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше
# предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать
# генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
# s = [5, 10, 6, 2, 11, 15, 3]
# res_list = [x for i, x in enumerate(s) if s[i] > s[i-1] and i > 0]
# print(res_list)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

# print(list(i for i in range(20, 241) if i % 20 == 0 or i % 21 ==0))

# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив
# чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения
# задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

# src_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# print(list(x for x in src_list if src_list.count(x) == 1))

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти
# четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех
# элементов списка.
# Подсказка: использовать функцию reduce().

# from functools import reduce
# print(reduce(lambda x, y: x * y, [x for x in range(100, 1001, 2)]))

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл
# не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

# from itertools import count, cycle
# # а)
# for i in count(start=3, step=1):
#     print(i)
#     if i == 10:
#         break
# б)
# sec = [3, 2, 1]
# i = 0
# for s4et in cycle(sec):
#     print(s4et)
#     i += 1 / (len(sec))
#     if i >= 4:
#         break


# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове
# функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная
# с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

# from math import factorial as fact
# from itertools import count
#
# def generator():
#     for i in count(1, 1):
#         yield fact(i)
#
# x, n = 1, int(input('Введите целое число: '))
#
# for el in generator():
#     print(f'Факториал {x} = {el}')
#     if x == n:
#         break
#     x += 1
